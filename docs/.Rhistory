dbSinOutliers <- dbSinOutliers[dbSinOutliers$Visua_obtenidas<80500786,]
ggplot(dbSinOutliers,aes(x=Seguidores, y = T_VisulizaMinu))+
geom_point()+
geom_smooth(method = "lm")+
scale_x_continuous(breaks = seq (0,9000000,300000),
labels=function(x) format(x, big.mark = ".", scientific = FALSE))+
scale_y_continuous(breaks = seq (0,6000000000,300000000),
labels=function(x) format(x, big.mark = ".", scientific = FALSE))+
theme_bw()+
labs(title = "Regresión entre Seguidores ganados y tiempo de visualización en minutos",
x = "Seguidores ganados",
y = "Visualización en minutos")+
theme(plot.title = element_text(hjust = 0.5))+
scale_fill_brewer("Países")+
theme(axis.text.x = element_text(angle=45, hjust = 1))
ggplot(dbSinOutliers,aes(x=Seguidores, y = MaxEspectadores))+
geom_point()+
geom_smooth(method = "lm")+
scale_x_continuous(breaks = seq (0,12000000,200000),
labels=function(x) format(x, big.mark = ".", scientific = FALSE))+
scale_y_continuous(breaks = seq (0,2000000,30000),
labels=function(x) format(x, big.mark = ".", scientific = FALSE))+
theme_bw()+
labs(title = "Regresión entre Seguidores ganados y Máximo de espectadores",
x = "Seguidores ganados",
y = "Máximo de espectadores")+
theme(plot.title = element_text(hjust = 0.5))+
scale_fill_brewer("Países")+
theme(axis.text.x = element_text(angle=45, hjust = 1))
sp <- ggscatter(dbSinOutliers, x = "Seguidores" , y = "T_VisulizaMinu",
add = "reg.line",
add.params = list(color = "blue", fill = "lightgray"),
conf.int = FALSE)
sp+stat_cor(method = "pearson")+
theme_bw()+
scale_x_continuous(breaks = seq (0,9000000,300000),
labels=function(x) format(x, big.mark = ".", scientific = FALSE))+
scale_y_continuous(breaks = seq (0,6000000000,300000000),
labels=function(x) format(x, big.mark = ".", scientific = FALSE))+
labs(title = "Regresión entre Seguidores ganados y tiempo de visualización en minutos",
x = "Seguidores ganados",
y = "Visualización en minutos")+
theme(axis.text.x = element_text(angle=45, hjust = 1))
ggplot(dbSinOutliers,aes(x=Seguidores, y = T_VisulizaMinu))+
geom_point()+
geom_smooth(method = "lm")+
scale_x_continuous(breaks = seq (0,9000000,300000),
labels=function(x) format(x, big.mark = ".", scientific = FALSE))+
scale_y_continuous(breaks = seq (0,6000000000,300000000),
labels=function(x) format(x, big.mark = ".", scientific = FALSE))+
theme_bw()+
labs(title = "Regresión entre Seguidores ganados y tiempo de visualización en minutos",
x = "Seguidores ganados",
y = "Visualización en minutos")+
theme(plot.title = element_text(hjust = 0.5))+
scale_fill_brewer("Países")+
theme(axis.text.x = element_text(angle=45, hjust = 1))
sp+stat_cor(method = "pearson")+
theme_bw()+
scale_x_continuous(breaks = seq (0,9000000,300000),
labels=function(x) format(x, big.mark = ".", scientific = FALSE))+
scale_y_continuous(breaks = seq (0,6000000000,300000000),
labels=function(x) format(x, big.mark = ".", scientific = FALSE))+
labs(title = "Regresión entre Seguidores ganados y tiempo de visualización en minutos",
x = "Seguidores ganados",
y = "Visualización en minutos")+
theme(axis.text.x = element_text(angle=45, hjust = 1))
sp+stat_cor(method = "lm")+
theme_bw()+
scale_x_continuous(breaks = seq (0,9000000,300000),
labels=function(x) format(x, big.mark = ".", scientific = FALSE))+
scale_y_continuous(breaks = seq (0,6000000000,300000000),
labels=function(x) format(x, big.mark = ".", scientific = FALSE))+
labs(title = "Regresión entre Seguidores ganados y tiempo de visualización en minutos",
x = "Seguidores ganados",
y = "Visualización en minutos")+
theme(axis.text.x = element_text(angle=45, hjust = 1))
sp+stat_cor(method = "pearson")+
theme_bw()+
scale_x_continuous(breaks = seq (0,9000000,300000),
labels=function(x) format(x, big.mark = ".", scientific = FALSE))+
scale_y_continuous(breaks = seq (0,6000000000,300000000),
labels=function(x) format(x, big.mark = ".", scientific = FALSE))+
labs(title = "Regresión entre Seguidores ganados y tiempo de visualización en minutos",
x = "Seguidores ganados",
y = "Visualización en minutos")+
theme(axis.text.x = element_text(angle=45, hjust = 1))
ggplot(dbSinOutliers,aes(x=Seguidores, y = MaxEspectadores))+
geom_point()+
geom_smooth(method = "lm")+
scale_x_continuous(breaks = seq (0,12000000,200000),
labels=function(x) format(x, big.mark = ".", scientific = FALSE))+
scale_y_continuous(breaks = seq (0,2000000,30000),
labels=function(x) format(x, big.mark = ".", scientific = FALSE))+
theme_bw()+
labs(title = "Regresión entre Seguidores ganados y Máximo de espectadores",
x = "Seguidores ganados",
y = "Máximo de espectadores")+
theme(plot.title = element_text(hjust = 0.5))+
scale_fill_brewer("Países")+
theme(axis.text.x = element_text(angle=45, hjust = 1))
sb <- ggscatter(dbSinOutliers, x = "Seguidores" , y = "MaxEspectadores",
add = "reg.line",
add.params = list(color = "blue", fill = "lightgray"),
conf.int = FALSE)
sb+stat_cor(method = "pearson")+
theme_bw()+
scale_x_continuous(breaks = seq (0,12000000,200000),
labels=function(x) format(x, big.mark = ".", scientific = FALSE))+
scale_y_continuous(breaks = seq (0,2000000,30000),
labels=function(x) format(x, big.mark = ".", scientific = FALSE))+
labs(title = "Regresión entre Seguidores ganados y Máximo de espectadores",
x = "Seguidores ganados",
y = "Máximo de espectadores")+
theme(axis.text.x = element_text(angle=45, hjust = 1))
regr1 <- lm(Seguidores ~ T_VisulizaMinu+Tie_TransmiMinu+MaxEspectadores+PromEspectadores+
Visua_obtenidas+factor(Auspiciadores)+factor(PublicoMaduro)+
factor(Lenguaje), data = dbSinOutliers, na.action = na.omit)
summary(regr1)
regr2 <- lm(Seguidores ~ T_VisulizaMinu+Tie_TransmiMinu+MaxEspectadores+
Visua_obtenidas+factor(Auspiciadores)+factor(PublicoMaduro)+
factor(Lenguaje), data = dbSinOutliers, na.action = na.omit)
summary(regr2)
regr3 <- lm(Seguidores ~ T_VisulizaMinu+Tie_TransmiMinu+PromEspectadores+
Visua_obtenidas+factor(Auspiciadores)+factor(PublicoMaduro)+
factor(Lenguaje), data = dbSinOutliers, na.action = na.omit)
summary(regr3)
#
regr4 <- lm(Seguidores ~ T_VisulizaMinu+Tie_TransmiMinu+PromEspectadores+
Visua_obtenidas+factor(PublicoMaduro)+factor(Lenguaje),
data = dbSinOutliers, na.action = na.omit)
summary(regr4)
#
regr5 <- lm(Seguidores ~ T_VisulizaMinu+Tie_TransmiMinu+PromEspectadores+
factor(PublicoMaduro)+factor(Lenguaje), data = dbSinOutliers, na.action = na.omit)
summary(regr5)
setwd("~/GitHub/Laboratorio2/docs")
knitr::opts_chunk$set(echo = TRUE)
# Streamers con mayor cantidad de seguidores ganados
wordcloud2(db_Channel, size = 0.6, color='random-dark', minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1)
wordcloud2(db_lenguaje, size = 3.8, color='random-dark', minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1)
```{r,fig.width = 15}
# graficos de 2 variables
### 1era variable "Seguidores"
db_Channel <- db[,c(1,6)]
db_Channel <- db_Channel[order(db_Channel$Seguidores, decreasing = TRUE),]
names(db_Channel) <- c("word","freq")
as.numeric(db_Channel$freq)
as.numeric(db_Channel$freq)
# Streamers con mayor cantidad de seguidores ganados
wordcloud2(db_Channel, size = 0.6, color='random-dark', minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1)
nube1 <- wordcloud2(db_lenguaje, color='random-dark', minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1)
nube1
nube2 <- wordcloud2(db_lenguaje, size = 3.8, color='random-dark', minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1)
nube2
# Streamers con mayor cantidad de seguidores ganados
nube3 <- wordcloud2(db_Channel, size = 0.6, color='random-dark', minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1)
nube3
# graficos de 2 variables
db_Channel <- db[,c(1,6)]
db_Channel <- db_Channel[order(db_Channel$Seguidores, decreasing = TRUE),]
names(db_Channel) <- c("word","freq")
#as.numeric(db_Channel$freq)
nube3 <- wordcloud2(db_Channel, size = 0.6, color='random-dark', minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1)
nube3
# graficos de 2 variables
db_Channel <- db[,c(1,6)]
db_Channel <- db_Channel[order(db_Channel$Seguidores, decreasing = TRUE),]
names(db_Channel) <- c("word","freq")
as.numeric(db_Channel$freq)
nube3 <- wordcloud2(db_Channel, size = 0.6, color='random-dark', minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1)
nube3
# graficos de 2 variables
db_Channel <- db[,c(1,6)]
db_Channel <- db_Channel[order(db_Channel$Seguidores, decreasing = TRUE),]
names(db_Channel) <- c("word","freq")
#as.numeric(db_Channel$freq)
nube3 <- wordcloud2(db_Channel, size = 0.6, color='random-dark', minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1)
nube3
# variable "Lenguaje"
#### Es muy grande la diferencia de Idioma, casi todos hablan ingles
#### Se deja fuera el ingles para guardar las proporciones
db_lenguaje <- db %>%
group_by(Lenguaje) %>%
count(Lenguaje)
nube1 <- wordcloud2(db_lenguaje, color='random-dark', minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1)
nube1
# variable "Lenguaje"
#### Es muy grande la diferencia de Idioma, casi todos hablan ingles
#### Se agrega el ingles para guardar las proporciones
db_lenguaje <- db %>%
group_by(Lenguaje) %>%
count(Lenguaje)
nube2 <- wordcloud2(db_lenguaje, size = 3.8, color='random-dark', minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1)
nube2
# graficos de 2 variables
db_Channel <- db[,c(1,6)]
db_Channel <- db_Channel[order(db_Channel$Seguidores, decreasing = TRUE),]
names(db_Channel) <- c("word","freq")
as.numeric(db_Channel$freq)
nube3 <- wordcloud2(db_Channel, size = 0.6, color='random-dark', minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1)
nube3
# graficos de 2 variables
db_Channel <- db[,c(1,6)]
db_Channel <- db_Channel[order(db_Channel$Seguidores, decreasing = TRUE),]
names(db_Channel) <- c("word","freq")
as.numeric(db_Channel$freq)
nube3 <- wordcloud2(db_Channel, size = 0.6, color='random-dark', minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1)
nube3
# graficos de 2 variables
db_Channel <- db[,c(1,6)]
db_Channel <- db_Channel[order(db_Channel$Seguidores, decreasing = TRUE),]
names(db_Channel) <- c("word","freq")
#as.numeric(db_Channel$freq)
nube3 <- wordcloud2(db_Channel, size = 0.6, color='random-dark', minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1)
nube3
res <- cor(db1, use = "pairwise.complete.obs",
method = "pearson")
# colores: 'RdBu', 'BrBG', 'PiYG', 'PRGn', 'PuOr', 'RdYlBu'
corrplot(res[,c(1:10)], type = "upper", method= "square", tl.col = "black",
addCoef.col = 'black', col = COL2('BrBG'))
res <- cor(db1, use = "pairwise.complete.obs",
method = "pearson")
# colores: 'RdBu', 'BrBG', 'PiYG', 'PRGn', 'PuOr', 'RdYlBu'
corrplot(res[,c(1:10)], type = "upper", method= "square", tl.col = "black",
addCoef.col = 'black', col = COL2('BrBG'))
res <- cor(db1, use = "pairwise.complete.obs",
method = "pearson")
# colores: 'RdBu', 'BrBG', 'PiYG', 'PRGn', 'PuOr', 'RdYlBu'
corrplot(res[,c(1:10)], type = "upper", method= "square", tl.col = "black",
addCoef.col = 'black', col = COL2('BrBG'))
res <- cor(db1, use = "pairwise.complete.obs",
method = "pearson")
# colores: 'RdBu', 'BrBG', 'PiYG', 'PRGn', 'PuOr', 'RdYlBu'
corrplot(res[,c(1:10)], type = "upper", method= "square", tl.col = "black",
addCoef.col = 'black', col = COL2('BrBG'))
knitr::opts_chunk$set(echo = TRUE)
# FOR que ordena numeros de menor a mayor.
numeros <- c(2,4,6,8,10,1,3,5,7,9)
numeros_funcion <- function(numeros){
for(repeticion in 1:length(numeros)){
for(valor in 1:(length(numeros)-1)){
if(numeros[valor] > numeros[valor+1]){
tpm <- numeros[valor]
numeros[valor] <- numeros[valor+1]
numeros[valor+1] <- tpm
}
}
}
return(numeros)
}
numeros_funcion(numeros)
for(i in 1:10) {                                           # Head of for-loop
x1 <- i^2                                                # Code block
print(x1)                                                # Print results
}
nombres <- c("Nicolas","Matias","Danae","Paulina","Javier","Roberto","Carolina","Felipe")
for ( i in nombres )  {
platita <- nchar ( i )*1000
print ( paste ( "El nombre ",i," tendra una cuota de", platita) )
}
nombres <- c("Nicolas","Matias","Danae","Paulina","Javier","Roberto","Carolina","Felipe")
for ( i in nombres )  {
platita <- nchar ( i )*1000
print ( paste ( i," tendra una cuota de", platita) )
}
set.seed(1)
PrecioPalta <- runif(1000000, min = 1931, max = 193105)
print(PrecioPalta)
set.seed(1)
PrecioPalta <- runif(8, min = 5000, max = 10000)
print(PrecioPalta)
set.seed(1)
PrecioPalta <- runif(8, min = 5000, max = 10000,replace=F)
set.seed(1)
PrecioPalta <- runif(8, min = 5000, max = 10000, replace=F)
set.seed(1)
PrecioPalta <- sample(5000.:10000,8, replace=F)
print(PrecioPalta)
set.seed(1)
PrecioPalta <- sample(5000.:10000,8, replace=F)
print(PrecioPalta)
set.seed(1)
PrecioPalta <- sample(5000.:10000,8, replace=F)
print(PrecioPalta)
#set.seed(1)
PrecioPalta <- sample(5000.:10000,8, replace=F)
print(PrecioPalta)
#set.seed(1)
PrecioPalta <- sample(5000.:10000,8, replace=F)
print(PrecioPalta)
#set.seed(1)
PrecioPalta <- sample(5000.:10000,8, replace=F)
print(PrecioPalta)
set.seed(1)
PrecioPalta <- sample(5000.:10000,8, replace=F)
print(PrecioPalta)
set.seed(1)
cuota <- sample(5000.:10000,8, replace=F)
print(cuota)
df <- data.frame(nombres,cuota)
df
for ( i in df )  {
platita <- nchar ( i )*1000
print ( paste ( i," tendra una cuota de", platita) )
}
for ( i in df )  {
print ( paste (i) )
}
for ( i in df )  {
print ( paste (i[1]) )
}
for ( i in df )  {
print ( paste (i[,nombres], ) )
}
for ( i in df )  {
print ( paste (i[,nombres == nombres], ) )
}
for ( i in df )  {
print ( paste (i[,c(1)], ) )
}
print (i)
for ( i in df$nombres && j in df$cuota)  {
df <- data.frame(c(1:8),nombres,cuota)
df
df <- data.frame(id,nombres,cuota)
id <- c(1:8)
df <- data.frame(id,nombres,cuota)
df
for ( i in df$id)  {
print(i)
}
print(df[i,2])
resultados <- []
resultados <- []
resultados <- []
resultados <- ()
resultados <- list()
for ( i in df$id)  {
resultados([]) <- print(df[i,2])
resultados <- list()
for ( i in df$id)  {
resultados() <- print(df[i,2])
}
resultados <- list()
for ( i in df$id)  {
resultados([i]) <- print(df[i,2])
print(resultados)
resultados <- list()
for ( i in df$id)  {
resultados <- df[i,2]
print(resultados)
}
#resultados <- list()
for ( i in df$id)  {
resultados <- df[i,2]
print(resultados)
}
#resultados <- list()
for ( i in df$id)  {
resultados <- df[i,2]
print(resultados)
}
#resultados <- list()
for ( i in df$id)  {
resultados <- df[i,2]
print(resultados)
}
resultados <- list()
for ( i in df$id)  {
resultados <- df[i,2]
print(resultados)
}
resultados <- list()
for ( i in df$id)  {
resultados <- df[i,2]
print(resultados)
}
set.seed(1)
cuota <- sample(5000:10000,8, replace=F)
nombres <- c("Nicolas","Matias","Danae","Paulina","Javier","Roberto","Carolina","Felipe")
id <- c(1:8)
df <- data.frame(id,nombres,cuota)
df
#resultados <- list()
for ( i in df$id)  {
resultados <- df[i,2]
print(resultados)
}
for ( i in df$id)  {
Persona <- df[i,2]
Cuota <- df[i,3]
print(paste(Persona," tendra que pagar una cuota de", Cuota))
}
print(paste(Persona,"tendra que pagar una cuota de", Cuota))
for ( i in df$id)  {
Persona <- df[i,2]
Cuota <- df[i,3]
print(paste(Persona,"tendra que pagar una cuota de", Cuota))
}
set.seed(1)
cuota <- sample(5000:10000,8, replace=F)
nombres <- c("Nicolas","Matias","Danae","Paulina","Javier","Roberto","Carolina","Felipe")
df <- data.frame(nombres,cuota)
set.seed(1)
cuota <- sample(5000:10000,8, replace=F)
nombres <- c("Nicolas","Matias","Danae","Paulina","Javier","Roberto","Carolina","Felipe")
df <- data.frame(nombres,cuota)
for ( i in df$id)  {
Persona <- df[i,1]
Cuota <- df[i,2]
print(paste(Persona,"tendra que pagar una cuota de", Cuota))
}
for ( i in df)  {
Persona <- df[i,1]
Cuota <- df[i,2]
print(paste(Persona,"tendra que pagar una cuota de", Cuota))
}
set.seed(1)
cuota <- sample(5000:10000,8, replace=F)
nombres <- c("Nicolas","Matias","Danae","Paulina","Javier","Roberto","Carolina","Felipe")
id <- c(1:8)
df <- data.frame(id,nombres,cuota)
for ( i in df$id)  {
Persona <- df[i,2]
Cuota <- df[i,3]
print(paste(Persona,"tendra que pagar una cuota de", Cuota))
}
set.seed(1)
cuota <- sample(5000:10000,8, replace=F)
nombres <- c("Nicolas","Matias","Danae","Paulina","Javier","Roberto","Carolina","Felipe")
id <- c(1:8)
df <- data.frame(id,nombres,cuota)
for ( i in df$id)  {
Persona <- df[i,2]
Cuota <- df[i,3]
print(paste(Persona,"tendra que pagar una cuota de", Cuota))
}
primes_list <- list(2, 3, 5, 7, 11, 13)
for (i in 1:length(primes_list)) {
print(primes_list[[i]])
}
set.seed(1)
cuota <- sample(0:33,4, replace=F)
set.seed(1)
cuota <- sample(0:33,4, replace=F)
set.seed(1)
numero <- sample(0:33,4, replace=F)
numero
set.seed(1)
numero <- sample(0:33,10, replace=F)
numero
set.seed(1)
numero <- sample(0:33,10)
numero
numero <- sample(-33:33,10)
numero
numero <- sample(-33:33,10)
numero
numero <- sample(-33:33,10)
numero
numero <- sample(-33:33,10)
numero
numero <- runif(10, min = -50, max = 50)
valor <- NA
for (i in 1:10) {
if (numero[i]>0) {
valor[i] <- "positivo"
}else{
valor[i] <- "negativo"
}
}
numero <- runif(10, min = -50, max = 50)
valor <- NA
for (i in 1:10) {
if (numero[i]>0) {
valor[i] <- "positivo"
}else{
valor[i] <- "negativo"
}
print(paste("El numero",numero[i],"es",valor[i]))
}
numero <- runif(10, min = -50, max = 50)
valor <- NA
for (i in 1:10) {
if (numero[i]>0) {
valor[i] <- "positivo"
}else{
valor[i] <- "negativo"
}
print(paste("El numero",numero[i],"es",valor[i]))
}
numero <- runif(10, min = -50, max = 50)
valor <- NA
for (i in 1:10) {
if (numero[i]>0) {
valor[i] <- "positivo"
}else{
valor[i] <- "negativo"
}
print(paste("El numero",numero[i],"es",valor[i]))
}
set.seed(1)
cuota <- sample(5000:10000,8, replace=F)
nombres <- c("Nicolas","Matias","Danae","Paulina","Javier","Roberto","Carolina","Felipe")
id <- c(1:8)
df <- data.frame(id,nombres,cuota)
for ( i in df$id)  {
Persona <- df[i,2]
Cuota <- df[i,3]
print(paste(Persona,"tendra que pagar una cuota de", Cuota))
}
